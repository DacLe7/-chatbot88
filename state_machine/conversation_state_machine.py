"""
Conversation State Machine - Qu·∫£n l√Ω lu·ªìng h·ªôi tho·∫°i chatbot
File n√†y ch·ª©a logic chuy·ªÉn ƒë·ªïi gi·ªØa c√°c tr·∫°ng th√°i h·ªôi tho·∫°i
"""

import re
import logging
from enum import Enum
from typing import Dict, List, Tuple, Optional

# Setup logger cho state machine
state_logger = logging.getLogger('emotionai.state_machine')

class ConversationState(Enum):
    """C√°c tr·∫°ng th√°i h·ªôi tho·∫°i"""
    GREETING = "greeting"
    SMALL_TALK = "small_talk"
    EMOTION_DETECTED = "emotion_detected"
    UNKNOWN_CONTEXT = "unknown_context"
    ASK_FEELING = "ask_feeling"
    SUGGEST_FRAGRANCE = "suggest_fragrance"
    END_SESSION = "end_session"

class ConversationStateMachine:
    def __init__(self):
        # T·ª´ kh√≥a c·∫£m x√∫c (c√≥ d·∫•u v√† kh√¥ng d·∫•u)
        self.emotion_keywords = {
            "positive": [
                "vui", "vui ve", "vui l·∫Øm", "vui lam", "hanh phuc", "h·∫°nh ph√∫c", "ph·∫•n kh√≠ch", "phan khich", 
                "t·ª± h√†o", "tu hao", "bi·∫øt ∆°n", "biet on", "y√™u ƒë·ªùi", "yeu doi",
                "nƒÉng ƒë·ªông", "nang dong", "tuy·ªát v·ªùi", "tuyet voi", "th√≠ch", "thich",
                "r·∫•t vui", "rat vui", "c·ª±c vui", "cuc vui", "si√™u vui", "sieu vui"
            ],
            "negative": [
                "bu·ªìn", "buon", "bu·ªìn l·∫Øm", "buon lam", "m·ªát", "met", "ch√°n", "chan", "lo l·∫Øng", "lo lang",
                "t·ª©c", "tuc", "h·ªùn", "hon", "stress", "cƒÉng th·∫≥ng", "cang thang",
                "s·ª£ h√£i", "so hai", "c√¥ ƒë∆°n", "co don", "tuy·ªát v·ªçng", "tuyet vong",
                "kh√≥ khƒÉn", "kho khan", "m·∫•t m√°t", "mat mat", "r·∫•t bu·ªìn", "rat buon"
            ],
            "neutral": [
                "b√¨nh th∆∞·ªùng", "binh thuong", "·ªïn ƒë·ªãnh", "on dinh", 
                "kh√¥ng bi·∫øt", "khong biet", "kh√¥ng ch·∫Øc", "khong chac",
                "b√¨nh y√™n", "binh yen", "tƒ©nh l·∫∑ng", "tinh lang", "ok", "·ªïn", "on"
            ]
        }
        
        # T·ª´ kh√≥a ƒë·ªìng √Ω/t·ª´ ch·ªëi
        self.agreement_keywords = ["c√≥", "co", "ok", "okay", "mu·ªën", "muon", "th√≠ch", "thich", "ƒë∆∞·ª£c", "duoc", "yes", "y", "ti·∫øp t·ª•c", "tiep tuc"]
        self.disagreement_keywords = ["kh√¥ng", "khong", "no", "kh√¥ng mu·ªën", "khong muon", "kh√¥ng th√≠ch", "khong thich"]
        
        # T·ª´ kh√≥a k·∫øt th√∫c
        self.end_keywords = ["t·∫°m bi·ªát", "tam biet", "bye", "goodbye", "k·∫øt th√∫c", "ket thuc", "th√¥i", "thoi"]
        
        # Kh·ªüi t·∫°o state
        self.current_state = ConversationState.GREETING
        self.user_id = None
        self.detected_emotion = None
        self.confidence = 0.0
        
    def reset_conversation(self, user_id: str):
        """Reset cu·ªôc tr√≤ chuy·ªán cho user m·ªõi"""
        self.current_state = ConversationState.GREETING
        self.user_id = user_id
        self.detected_emotion = None
        self.confidence = 0.0
    
    def detect_emotion(self, message: str) -> Tuple[str, float]:
        """Ph√°t hi·ªán c·∫£m x√∫c t·ª´ tin nh·∫Øn (tokenize, lo·∫°i b·ªè d·∫•u c√¢u, so kh·ªõp t·ª´)"""
        message_lower = message.lower()
        # Lo·∫°i b·ªè d·∫•u c√¢u
        message_clean = re.sub(r'[^\w\s]', ' ', message_lower)
        tokens = message_clean.split()
        
        # ƒê·∫øm t·ª´ kh√≥a cho m·ªói lo·∫°i c·∫£m x√∫c
        emotion_scores = {"positive": 0, "negative": 0, "neutral": 0}
        for emotion_type, keywords in self.emotion_keywords.items():
            for keyword in keywords:
                # So kh·ªõp t·ª´ng t·ª´ ho·∫∑c c·ª•m t·ª´
                keyword_tokens = keyword.split()
                if len(keyword_tokens) == 1:
                    if keyword in tokens:
                        emotion_scores[emotion_type] += 1
                else:
                    # So kh·ªõp c·ª•m t·ª´
                    if keyword in message_clean:
                        emotion_scores[emotion_type] += 1
        
        # X√°c ƒë·ªãnh c·∫£m x√∫c ch√≠nh
        max_score = max(emotion_scores.values())
        if max_score == 0:
            state_logger.debug(f"üîç No emotion detected in: '{message[:50]}...'")
            return "neutral", 0.0
        
        # T√¨m c·∫£m x√∫c c√≥ ƒëi·ªÉm cao nh·∫•t
        detected_emotion = max(emotion_scores, key=emotion_scores.get)
        confidence = min(max_score / 3.0, 1.0)  # Normalize confidence
        
        state_logger.info(f"üéØ Emotion detected: '{message[:50]}...' -> {detected_emotion} (confidence: {confidence:.3f})")
        return detected_emotion, confidence
    
    def detect_agreement(self, message: str) -> bool:
        """Ph√°t hi·ªán user c√≥ ƒë·ªìng √Ω kh√¥ng"""
        message_lower = message.lower()
        return any(keyword in message_lower for keyword in self.agreement_keywords)
    
    def detect_disagreement(self, message: str) -> bool:
        """Ph√°t hi·ªán user c√≥ t·ª´ ch·ªëi kh√¥ng"""
        message_lower = message.lower()
        return any(keyword in message_lower for keyword in self.disagreement_keywords)
    
    def detect_end_intent(self, message: str) -> bool:
        """Ph√°t hi·ªán user mu·ªën k·∫øt th√∫c"""
        message_lower = message.lower()
        return any(keyword in message_lower for keyword in self.end_keywords)
    
    def detect_restart_intent(self, message: str) -> bool:
        """Ph√°t hi·ªán user mu·ªën b·∫Øt ƒë·∫ßu l·∫°i"""
        message_lower = message.lower()
        restart_keywords = ["b·∫Øt ƒë·∫ßu l·∫°i", "restart", "b·∫Øt ƒë·∫ßu", "m·ªõi", "l·∫°i t·ª´ ƒë·∫ßu"]
        return any(keyword in message_lower for keyword in restart_keywords)
    
    def process_message(self, message: str) -> Dict:
        """X·ª≠ l√Ω tin nh·∫Øn v√† tr·∫£ v·ªÅ ph·∫£n h·ªìi ph√π h·ª£p"""
        
        previous_state = self.current_state.value
        state_logger.debug(f"üîÑ Processing message: '{message[:50]}...' in state: {previous_state}")
        
        # Ki·ªÉm tra intent b·∫Øt ƒë·∫ßu l·∫°i
        if self.detect_restart_intent(message):
            state_logger.info(f"üîÑ Restart intent detected, resetting conversation for user: {self.user_id}")
            self.reset_conversation(self.user_id)
            return self._handle_greeting_state(message)
        
        # Ki·ªÉm tra intent k·∫øt th√∫c
        if self.detect_end_intent(message):
            state_logger.info(f"üîÑ End intent detected, ending session for user: {self.user_id}")
            self.current_state = ConversationState.END_SESSION
            return self._get_end_response()
        
        # X·ª≠ l√Ω theo state hi·ªán t·∫°i
        if self.current_state == ConversationState.GREETING:
            result = self._handle_greeting_state(message)
        elif self.current_state == ConversationState.SMALL_TALK:
            result = self._handle_small_talk_state(message)
        elif self.current_state == ConversationState.EMOTION_DETECTED:
            result = self._handle_emotion_detected_state(message)
        elif self.current_state == ConversationState.UNKNOWN_CONTEXT:
            result = self._handle_unknown_context_state(message)
        elif self.current_state == ConversationState.ASK_FEELING:
            result = self._handle_ask_feeling_state(message)
        elif self.current_state == ConversationState.SUGGEST_FRAGRANCE:
            result = self._handle_suggest_fragrance_state(message)
        else:  # END_SESSION
            result = self._get_end_response()
        
        # Log state transition n·∫øu c√≥ thay ƒë·ªïi
        if previous_state != self.current_state.value:
            state_logger.info(f"üîÑ State transition: {previous_state} -> {self.current_state.value}")
        
        return result
    
    def _handle_greeting_state(self, message: str) -> Dict:
        """X·ª≠ l√Ω state GREETING"""
        self.current_state = ConversationState.SMALL_TALK
        return {
            "response": "Ch√†o b·∫°n! T√¥i l√† EmotionAI ‚Äì chatbot g·ª£i √Ω m√πi n·∫øn theo c·∫£m x√∫c üíú\n\nB·∫°n c√≥ th·ªÉ chia s·∫ª c·∫£m x√∫c hi·ªán t·∫°i c·ªßa m√¨nh kh√¥ng?",
            "state": self.current_state.value,
            "suggestions": ["üòä T√¥i vui", "üòî T√¥i bu·ªìn", "üò∞ T√¥i stress", "ü§î Kh√¥ng bi·∫øt"]
        }
    
    def _handle_small_talk_state(self, message: str) -> Dict:
        """X·ª≠ l√Ω state SMALL_TALK"""
        # Ph√°t hi·ªán c·∫£m x√∫c
        emotion, confidence = self.detect_emotion(message)
        
        if confidence > 0.3:  # C√≥ ph√°t hi·ªán c·∫£m x√∫c r√µ r√†ng
            self.detected_emotion = emotion
            self.confidence = confidence
            self.current_state = ConversationState.EMOTION_DETECTED
            return self._get_emotion_detected_response(emotion)
        else:
            # Kh√¥ng hi·ªÉu r√µ, chuy·ªÉn sang UNKNOWN_CONTEXT
            self.current_state = ConversationState.UNKNOWN_CONTEXT
            return {
                "response": "Xin l·ªói, m√¨nh ch∆∞a r√µ ph·∫ßn n√†y üòÖ\n\nNh∆∞ng m√¨nh c√≥ th·ªÉ t∆∞ v·∫•n m√πi n·∫øn ph√π h·ª£p v·ªõi c·∫£m x√∫c c·ªßa b·∫°n.\nB·∫°n c√≥ mu·ªën th·ª≠ kh√¥ng?",
                "state": self.current_state.value,
                "suggestions": ["C√≥", "Kh√¥ng", "ü§î Kh√¥ng bi·∫øt"]
            }
    
    def _handle_emotion_detected_state(self, message: str) -> Dict:
        """X·ª≠ l√Ω state EMOTION_DETECTED"""
        if self.detect_agreement(message):
            self.current_state = ConversationState.SUGGEST_FRAGRANCE
            return self._get_fragrance_suggestion()
        else:
            self.current_state = ConversationState.SMALL_TALK
            return {
                "response": "Kh√¥ng sao ƒë√¢u! B·∫°n c√≥ th·ªÉ chia s·∫ª b·∫•t c·ª© ƒëi·ªÅu g√¨ kh√°c v·ªõi m√¨nh üòä",
                "state": self.current_state.value,
                "suggestions": ["üòä T√¥i vui", "üòî T√¥i bu·ªìn", "üò∞ T√¥i stress"]
            }
    
    def _handle_unknown_context_state(self, message: str) -> Dict:
        """X·ª≠ l√Ω state UNKNOWN_CONTEXT"""
        if self.detect_agreement(message):
            self.current_state = ConversationState.ASK_FEELING
            return {
                "response": "B·∫°n c√≥ th·ªÉ chia s·∫ª c·∫£m x√∫c hi·ªán t·∫°i c·ªßa m√¨nh kh√¥ng?\nV√≠ d·ª•: 't√¥i ƒëang stress', 'h√¥m nay r·∫•t vui'...",
                "state": self.current_state.value,
                "suggestions": ["üòä T√¥i vui", "üòî T√¥i bu·ªìn", "üò∞ T√¥i stress", "ü§î Kh√¥ng bi·∫øt"]
            }
        else:
            self.current_state = ConversationState.SMALL_TALK
            return {
                "response": "Kh√¥ng sao! B·∫°n c√≥ th·ªÉ n√≥i chuy·ªán b√¨nh th∆∞·ªùng v·ªõi m√¨nh üòä",
                "state": self.current_state.value,
                "suggestions": ["üòä T√¥i vui", "üòî T√¥i bu·ªìn", "üò∞ T√¥i stress"]
            }
    
    def _handle_ask_feeling_state(self, message: str) -> Dict:
        """X·ª≠ l√Ω state ASK_FEELING"""
        # Ph√°t hi·ªán c·∫£m x√∫c
        emotion, confidence = self.detect_emotion(message)
        
        if confidence > 0.2:  # C√≥ ph√°t hi·ªán c·∫£m x√∫c
            self.detected_emotion = emotion
            self.confidence = confidence
            self.current_state = ConversationState.EMOTION_DETECTED
            return self._get_emotion_detected_response(emotion)
        else:
            self.current_state = ConversationState.SMALL_TALK
            return {
                "response": "Kh√¥ng sao! B·∫°n c√≥ th·ªÉ chia s·∫ª khi n√†o c·∫£m th·∫•y tho·∫£i m√°i h∆°n üòä",
                "state": self.current_state.value,
                "suggestions": ["üòä T√¥i vui", "üòî T√¥i bu·ªìn", "üò∞ T√¥i stress"]
            }
    
    def _handle_suggest_fragrance_state(self, message: str) -> Dict:
        """X·ª≠ l√Ω state SUGGEST_FRAGRANCE"""
        if self.detect_agreement(message):
            self.current_state = ConversationState.ASK_FEELING
            return {
                "response": "Tuy·ªát! B·∫°n c√≥ th·ªÉ chia s·∫ª c·∫£m x√∫c kh√°c ho·∫∑c mu·ªën t∆∞ v·∫•n th√™m kh√¥ng?",
                "state": self.current_state.value,
                "suggestions": ["üòä T√¥i vui", "üòî T√¥i bu·ªìn", "üò∞ T√¥i stress", "T·∫°m bi·ªát"]
            }
        else:
            self.current_state = ConversationState.SMALL_TALK
            return {
                "response": "Kh√¥ng sao! B·∫°n c√≥ th·ªÉ chia s·∫ª b·∫•t c·ª© ƒëi·ªÅu g√¨ kh√°c v·ªõi m√¨nh üòä",
                "state": self.current_state.value,
                "suggestions": ["üòä T√¥i vui", "üòî T√¥i bu·ªìn", "üò∞ T√¥i stress"]
            }
    
    def _get_emotion_detected_response(self, emotion: str) -> Dict:
        """T·∫°o ph·∫£n h·ªìi khi ph√°t hi·ªán c·∫£m x√∫c"""
        emotion_names = {
            "positive": "vui v·∫ª, t√≠ch c·ª±c",
            "negative": "bu·ªìn, ti√™u c·ª±c", 
            "neutral": "b√¨nh th∆∞·ªùng, c√¢n b·∫±ng"
        }
        
        return {
            "response": f"C·∫£m x√∫c b·∫°n ƒëang chia s·∫ª l√† {emotion_names.get(emotion, emotion)}, m√¨nh r·∫•t ƒë·ªìng c·∫£m ‚ù§Ô∏è\n\nB·∫°n c√≥ mu·ªën m√¨nh g·ª£i √Ω m√πi n·∫øn ph√π h·ª£p v·ªõi c·∫£m x√∫c ƒë√≥ kh√¥ng?",
            "state": self.current_state.value,
            "emotion": emotion,
            "confidence": self.confidence,
            "suggestions": ["C√≥", "Kh√¥ng", "T·∫°m bi·ªát"]
        }
    
    def _get_fragrance_suggestion(self) -> Dict:
        """T·∫°o g·ª£i √Ω n·∫øn th∆°m"""
        return {
            "response": "M√¨nh s·∫Ω g·ª£i √Ω m√πi n·∫øn ph√π h·ª£p v·ªõi c·∫£m x√∫c c·ªßa b·∫°n! üïØÔ∏è",
            "state": self.current_state.value,
            "emotion": self.detected_emotion,
            "confidence": self.confidence,
            "suggestions": ["Ti·∫øp t·ª•c", "T·∫°m bi·ªát"]
        }
    
    def _get_end_response(self) -> Dict:
        """T·∫°o ph·∫£n h·ªìi k·∫øt th√∫c"""
        return {
            "response": "C·∫£m ∆°n b·∫°n ƒë√£ tr√≤ chuy·ªán c√πng EmotionAI.\nN·∫øu c·∫ßn th√™m t∆∞ v·∫•n, m√¨nh lu√¥n s·∫µn s√†ng üåø",
            "state": self.current_state.value,
            "suggestions": ["B·∫Øt ƒë·∫ßu l·∫°i"]
        }
    
    def get_current_state(self) -> str:
        """L·∫•y state hi·ªán t·∫°i"""
        return self.current_state.value
    
    def get_detected_emotion(self) -> Tuple[str, float]:
        """L·∫•y c·∫£m x√∫c ƒë√£ ph√°t hi·ªán"""
        return self.detected_emotion, self.confidence

# Test function
def test_state_machine():
    """Test state machine"""
    machine = ConversationStateMachine()
    machine.reset_conversation("test_user")
    
    test_messages = [
        "xin ch√†o",
        "t√¥i bu·ªìn",
        "c√≥",
        "ti·∫øp t·ª•c",
        "t√¥i vui",
        "c√≥",
        "t·∫°m bi·ªát"
    ]
    
    print("üß™ Test State Machine")
    print("=" * 40)
    
    for i, message in enumerate(test_messages, 1):
        print(f"\n{i}. User: {message}")
        result = machine.process_message(message)
        print(f"   State: {result['state']}")
        print(f"   Bot: {result['response'][:50]}...")
        if 'emotion' in result:
            print(f"   Emotion: {result['emotion']} ({result['confidence']:.2f})")

if __name__ == "__main__":
    test_state_machine() 