"""
S∆° ƒë·ªì m√πi h∆∞∆°ng - Mapping c·∫£m x√∫c v·ªõi n·∫øn th∆°m
File n√†y ch·ª©a logic g·ª£i √Ω n·∫øn th∆°m d·ª±a tr√™n c·∫£m x√∫c c·ªßa ng∆∞·ªùi d√πng
D·ªÖ d√†ng tinh ch·ªânh v√† b·ªï sung th√™m sau n√†y
"""

class FragranceMapper:
    def __init__(self):
        # S∆° ƒë·ªì mapping c·∫£m x√∫c v·ªõi n·∫øn th∆°m
        self.emotion_fragrance_map = {
            "positive": {
                "name": "C·∫£m x√∫c t√≠ch c·ª±c",
                "description": "Khi b·∫°n c·∫£m th·∫•y vui v·∫ª, h·∫°nh ph√∫c, ph·∫•n kh√≠ch",
                "fragrances": [
                    {
                        "name": "N·∫øn H∆∞∆°ng Cam Qu√Ωt T∆∞∆°i M√°t",
                        "scent": "Cam, Chanh, B∆∞·ªüi",
                        "benefit": "TƒÉng nƒÉng l∆∞·ª£ng, t·∫°o c·∫£m gi√°c s·∫£ng kho√°i",
                        "reason": "H∆∞∆°ng cam qu√Ωt gi√∫p tƒÉng serotonin, hormone h·∫°nh ph√∫c",
                        "emoji": "üçä"
                    },
                    {
                        "name": "N·∫øn H∆∞∆°ng Vanilla Ng·ªçt Ng√†o",
                        "scent": "Vanilla, Caramel, G·ªó ƒê√†n H∆∞∆°ng",
                        "benefit": "T·∫°o c·∫£m gi√°c ·∫•m √°p, tho·∫£i m√°i",
                        "reason": "Vanilla c√≥ t√°c d·ª•ng an th·∫ßn, gi·∫£m stress",
                        "emoji": "üç¶"
                    },
                    {
                        "name": "N·∫øn H∆∞∆°ng Hoa Nh√†i Tinh Khi·∫øt",
                        "scent": "Hoa Nh√†i, Hoa H·ªìng, Hoa O·∫£i H∆∞∆°ng",
                        "benefit": "TƒÉng c·∫£m x√∫c l√£ng m·∫°n, th∆∞ th√°i",
                        "reason": "Hoa nh√†i gi√∫p c√¢n b·∫±ng c·∫£m x√∫c, t·∫°o s·ª± b√¨nh y√™n",
                        "emoji": "üå∏"
                    }
                ]
            },
            "negative": {
                "name": "C·∫£m x√∫c ti√™u c·ª±c",
                "description": "Khi b·∫°n c·∫£m th·∫•y bu·ªìn, stress, lo l·∫Øng, m·ªát m·ªèi",
                "fragrances": [
                    {
                        "name": "N·∫øn H∆∞∆°ng O·∫£i H∆∞∆°ng Th∆∞ Gi√£n",
                        "scent": "Lavender, Chamomile, Bergamot",
                        "benefit": "Gi·∫£m stress, c·∫£i thi·ªán gi·∫•c ng·ªß",
                        "reason": "Lavender c√≥ t√°c d·ª•ng an th·∫ßn, gi·∫£m lo √¢u",
                        "emoji": "üíú"
                    },
                    {
                        "name": "N·∫øn H∆∞∆°ng G·ªó ƒê√†n H∆∞∆°ng ·∫§m √Åp",
                        "scent": "Sandalwood, Vanilla, H∆∞∆°ng Th·∫£o",
                        "benefit": "T·∫°o c·∫£m gi√°c b√¨nh y√™n, ·ªïn ƒë·ªãnh",
                        "reason": "G·ªó ƒë√†n h∆∞∆°ng gi√∫p tƒ©nh t√¢m, gi·∫£m cƒÉng th·∫≥ng",
                        "emoji": "ü™µ"
                    },
                    {
                        "name": "N·∫øn H∆∞∆°ng B·∫°c H√† T∆∞∆°i M√°t",
                        "scent": "Peppermint, Eucalyptus, Lemon",
                        "benefit": "TƒÉng t·∫≠p trung, gi·∫£m ƒëau ƒë·∫ßu",
                        "reason": "B·∫°c h√† c√≥ t√°c d·ª•ng k√≠ch th√≠ch tinh th·∫ßn, gi·∫£m m·ªát m·ªèi",
                        "emoji": "üåø"
                    }
                ]
            },
            "neutral": {
                "name": "C·∫£m x√∫c trung t√≠nh",
                "description": "Khi b·∫°n c·∫£m th·∫•y b√¨nh th∆∞·ªùng, c√¢n b·∫±ng",
                "fragrances": [
                    {
                        "name": "N·∫øn H∆∞∆°ng Hoa C√∫c D·ªãu Nh·∫π",
                        "scent": "Chamomile, Hoa C√∫c, H∆∞∆°ng Th·∫£o",
                        "benefit": "Duy tr√¨ s·ª± c√¢n b·∫±ng, th∆∞ gi√£n nh·∫π nh√†ng",
                        "reason": "Hoa c√∫c gi√∫p duy tr√¨ tr·∫°ng th√°i b√¨nh y√™n",
                        "emoji": "üåº"
                    },
                    {
                        "name": "N·∫øn H∆∞∆°ng G·ªó Tuy·∫øt T√πng T·ª± Nhi√™n",
                        "scent": "Cedarwood, Pine, Moss",
                        "benefit": "K·∫øt n·ªëi v·ªõi thi√™n nhi√™n, t·∫°o c·∫£m gi√°c an to√†n",
                        "reason": "H∆∞∆°ng g·ªó t·ª± nhi√™n gi√∫p t·∫°o c·∫£m gi√°c ·ªïn ƒë·ªãnh",
                        "emoji": "üå≤"
                    },
                    {
                        "name": "N·∫øn H∆∞∆°ng Hoa Sen Thanh T·ªãnh",
                        "scent": "Lotus, Bamboo, Green Tea",
                        "benefit": "T·∫°o kh√¥ng gian tƒ©nh l·∫∑ng, thanh t·ªãnh",
                        "reason": "Hoa sen t∆∞·ª£ng tr∆∞ng cho s·ª± b√¨nh y√™n v√† tinh khi·∫øt",
                        "emoji": "ü™∑"
                    }
                ]
            }
        }
    
    def get_fragrance_recommendation(self, emotion, confidence=0.5):
        """
        L·∫•y g·ª£i √Ω n·∫øn th∆°m d·ª±a tr√™n c·∫£m x√∫c
        
        Args:
            emotion (str): C·∫£m x√∫c ('positive', 'negative', 'neutral')
            confidence (float): ƒê·ªô tin c·∫≠y c·ªßa ph√¢n t√≠ch c·∫£m x√∫c (0-1)
        
        Returns:
            dict: Th√¥ng tin g·ª£i √Ω n·∫øn th∆°m
        """
        if emotion not in self.emotion_fragrance_map:
            # Fallback cho tr∆∞·ªùng h·ª£p kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c
            emotion = "neutral"
        
        emotion_data = self.emotion_fragrance_map[emotion]
        
        # Ch·ªçn n·∫øn th∆°m ng·∫´u nhi√™n t·ª´ danh s√°ch
        import random
        selected_fragrance = random.choice(emotion_data["fragrances"])
        
        # T·∫°o th√¥ng ƒëi·ªáp g·ª£i √Ω
        recommendation_message = self._create_recommendation_message(
            emotion_data, selected_fragrance, confidence
        )
        
        return {
            "emotion": emotion,
            "emotion_name": emotion_data["name"],
            "emotion_description": emotion_data["description"],
            "confidence": confidence,
            "fragrance": selected_fragrance,
            "recommendation_message": recommendation_message,
            "all_fragrances": emotion_data["fragrances"]  # T·∫•t c·∫£ l·ª±a ch·ªçn
        }
    
    def _create_recommendation_message(self, emotion_data, fragrance, confidence):
        """T·∫°o th√¥ng ƒëi·ªáp g·ª£i √Ω n·∫øn th∆°m"""
        
        confidence_level = "r·∫•t cao" if confidence > 0.8 else "cao" if confidence > 0.6 else "trung b√¨nh"
        
        messages = {
            "positive": [
                f"T√¥i th·∫•y b·∫°n ƒëang c·∫£m th·∫•y {emotion_data['name'].lower()}! {fragrance['emoji']}",
                f"ƒê·ªÉ tƒÉng c∆∞·ªùng c·∫£m x√∫c t√≠ch c·ª±c, t√¥i g·ª£i √Ω: **{fragrance['name']}**",
                f"üí° **L√Ω do**: {fragrance['reason']}",
                f"‚ú® **L·ª£i √≠ch**: {fragrance['benefit']}",
                f"üå∫ **H∆∞∆°ng th∆°m**: {fragrance['scent']}"
            ],
            "negative": [
                f"T√¥i hi·ªÉu b·∫°n ƒëang c·∫£m th·∫•y {emotion_data['name'].lower()}. {fragrance['emoji']}",
                f"ƒê·ªÉ c·∫£i thi·ªán t√¢m tr·∫°ng, t√¥i g·ª£i √Ω: **{fragrance['name']}**",
                f"üí° **L√Ω do**: {fragrance['reason']}",
                f"‚ú® **L·ª£i √≠ch**: {fragrance['benefit']}",
                f"üå∫ **H∆∞∆°ng th∆°m**: {fragrance['scent']}"
            ],
            "neutral": [
                f"T√¥i th·∫•y b·∫°n ƒëang ·ªü tr·∫°ng th√°i {emotion_data['name'].lower()}. {fragrance['emoji']}",
                f"ƒê·ªÉ duy tr√¨ s·ª± c√¢n b·∫±ng, t√¥i g·ª£i √Ω: **{fragrance['name']}**",
                f"üí° **L√Ω do**: {fragrance['reason']}",
                f"‚ú® **L·ª£i √≠ch**: {fragrance['benefit']}",
                f"üå∫ **H∆∞∆°ng th∆°m**: {fragrance['scent']}"
            ]
        }
        
        emotion_type = list(self.emotion_fragrance_map.keys())[
            list(self.emotion_fragrance_map.values()).index(emotion_data)
        ]
        
        return "\n".join(messages[emotion_type])
    
    def get_all_fragrances(self):
        """L·∫•y t·∫•t c·∫£ th√¥ng tin n·∫øn th∆°m"""
        return self.emotion_fragrance_map
    
    def add_fragrance(self, emotion, fragrance_data):
        """Th√™m n·∫øn th∆°m m·ªõi (cho vi·ªác m·ªü r·ªông sau n√†y)"""
        if emotion in self.emotion_fragrance_map:
            self.emotion_fragrance_map[emotion]["fragrances"].append(fragrance_data)
            return True
        return False
    
    def update_fragrance(self, emotion, index, fragrance_data):
        """C·∫≠p nh·∫≠t th√¥ng tin n·∫øn th∆°m (cho vi·ªác tinh ch·ªânh sau n√†y)"""
        if emotion in self.emotion_fragrance_map and 0 <= index < len(self.emotion_fragrance_map[emotion]["fragrances"]):
            self.emotion_fragrance_map[emotion]["fragrances"][index] = fragrance_data
            return True
        return False

# T·∫°o instance m·∫∑c ƒë·ªãnh
fragrance_mapper = FragranceMapper()

# Test function
def test_fragrance_mapping():
    """Test function ƒë·ªÉ ki·ªÉm tra logic mapping"""
    mapper = FragranceMapper()
    
    test_emotions = ["positive", "negative", "neutral"]
    
    print("üß™ Test Fragrance Mapping")
    print("=" * 50)
    
    for emotion in test_emotions:
        print(f"\nüé≠ C·∫£m x√∫c: {emotion}")
        recommendation = mapper.get_fragrance_recommendation(emotion, 0.8)
        print(f"üïØÔ∏è G·ª£i √Ω: {recommendation['fragrance']['name']}")
        print(f"üå∫ H∆∞∆°ng: {recommendation['fragrance']['scent']}")
        print(f"‚ú® L·ª£i √≠ch: {recommendation['fragrance']['benefit']}")

if __name__ == "__main__":
    test_fragrance_mapping() 