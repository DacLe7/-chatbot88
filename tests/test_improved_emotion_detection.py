#!/usr/bin/env python3
"""
Test Improved Emotion Detection
Ki·ªÉm tra logic c·∫£i thi·ªán ph√¢n lo·∫°i c·∫£m x√∫c v√† intent detection
"""

import re
from typing import Dict, List, Tuple, Optional
from ImprovedEmotionDetector import ImprovedEmotionDetector

def test_improved_detection():
    """Test logic c·∫£i thi·ªán"""
    detector = ImprovedEmotionDetector()
    
    test_cases = [
        # (message, expected_type, expected_value)
        ("ok", "intent", "agreement"),
        ("c√≥", "intent", "agreement"),
        ("ti·∫øp t·ª•c", "intent", "agreement"),
        ("kh√¥ng", "intent", "disagreement"),
        ("t·∫°m bi·ªát", "intent", "end"),
        ("b·∫Øt ƒë·∫ßu l·∫°i", "intent", "restart"),
        ("th·∫ø t√¥i d√πng sao", "intent", "question"),
        ("t√¥i vui", "emotion", "positive"),
        ("t√¥i bu·ªìn", "emotion", "negative"),
        ("t√¥i stress", "emotion", "negative"),
        ("b√¨nh th∆∞·ªùng", "emotion", "neutral"),
        ("kh√¥ng bi·∫øt", "emotion", "neutral"),
        ("ok...", "intent", "agreement"),
        ("stre...", "emotion", "negative"),  # stress vi·∫øt t·∫Øt
        ("....", "unknown", None),
        ("th·∫ø", "intent", "question"),
        ("v·∫≠y", "intent", "question"),
        ("t√¥i vui v√† mu·ªën ti·∫øp t·ª•c", "emotion", "positive"),  # emotion quan tr·ªçng h∆°n
        ("ok t√¥i bu·ªìn", "intent", "agreement"),  # intent quan tr·ªçng h∆°n
        ("kh√¥ng t√¥i kh√¥ng mu·ªën", "intent", "disagreement"),
    ]
    
    print("üß™ Test Improved Emotion & Intent Detection")
    print("=" * 60)
    
    correct = 0
    total = len(test_cases)
    results = []
    
    for message, expected_type, expected_value in test_cases:
        result = detector.analyze_message(message)
        actual_type = result["type"]
        actual_intent = result["intent"]
        actual_emotion = result["emotion"]
        
        if expected_type == "intent":
            match = (actual_type == "intent" and actual_intent == expected_value)
        elif expected_type == "emotion":
            match = (actual_type == "emotion" and actual_emotion == expected_value)
        elif expected_type == "unknown":
            match = (actual_type == "unknown")
        else:
            match = False
        
        if match:
            status = "‚úÖ"
            correct += 1
        else:
            status = "‚ùå"
        results.append((status, message, actual_type, actual_intent, actual_emotion, expected_type, expected_value, result))
    
    # In k·∫øt qu·∫£ chi ti·∫øt sau khi ch·∫°y h·∫øt
    for status, message, actual_type, actual_intent, actual_emotion, expected_type, expected_value, result in results:
        print(f"{status} '{message}' -> type: {actual_type}, intent: {actual_intent}, emotion: {actual_emotion} (expected: {expected_type}, {expected_value})")
        print(f"   Intent: {result['intent']} ({result['intent_confidence']:.2f}) | Emotion: {result['emotion']} ({result['emotion_confidence']:.2f})")
        print()
    
    accuracy = (correct / total) * 100
    print(f"üìä Accuracy: {correct}/{total} ({accuracy:.1f}%)")
    
    if accuracy >= 90:
        print("‚úÖ Test passed! Logic c·∫£i thi·ªán ho·∫°t ƒë·ªông t·ªët.")
        return True
    else:
        print("‚ùå Test failed! C·∫ßn c·∫£i thi·ªán th√™m.")
        return False

def test_specific_cases():
    """Test c√°c tr∆∞·ªùng h·ª£p c·ª• th·ªÉ t·ª´ log"""
    detector = ImprovedEmotionDetector()
    
    print("\nüîç Test Specific Cases from Logs")
    print("=" * 40)
    
    specific_cases = [
        ("ok...", "agreement"),
        ("th·∫ø t√¥i d√πng sao...", "question"),
        ("....", "unknown"),
        ("stre...", "negative"),
        ("stress...", "negative"),
        ("c√≥...", "agreement"),
    ]
    
    for message, expected_intent in specific_cases:
        result = detector.analyze_message(message)
        intent = result["intent"]
        
        if intent == expected_intent:
            status = "‚úÖ"
        else:
            status = "‚ùå"
        
        print(f"{status} '{message}' -> {intent} (expected: {expected_intent})")

if __name__ == "__main__":
    # Test logic c·∫£i thi·ªán
    success = test_improved_detection()
    
    if success:
        # Test c√°c tr∆∞·ªùng h·ª£p c·ª• th·ªÉ
        test_specific_cases()
        
        print("\n" + "=" * 60)
        print("‚úÖ Logic c·∫£i thi·ªán s·∫µn s√†ng ƒë·ªÉ √°p d·ª•ng v√†o d·ª± √°n!")
    else:
        print("\n‚ùå C·∫ßn c·∫£i thi·ªán logic tr∆∞·ªõc khi √°p d·ª•ng.") 